							    lim(1)

NAME
    lim - text processing language with pattern matching and backtracking

SYNTAX
    lim progfile

DESCRIPTION
    Parse and execute the LIM program in the file progfile.

    LIM is a text processing language in the general family of lex,
    yacc, sed, awk, and trans, but is based on Dijkstra's calculus of
    guarded commands.  The name is an acronym for Language of the
    Included Miracle, because LIM programs can violate the so-called
    Law of the Excluded Miracle.  For details see "A Discipline of
    Programming", Edsger W. Dijkstra, Prentice-Hall, 1976, and "A
    generalization of Dijkstra's calculus", Greg Nelson, Trans. on
    Programming Languages and Systems, October 1989, (or technical
    report SRC-16).


LIM LANGUAGE OVERVIEW

    Here are four important LIM primitives:

	Wr(s)        Write s
	Rd(s)        Read s, failing if it is not next in the input 
	A ; B        Do A, then do B
	A | B        Do A, else do B if A fails

    In the first two commands, "s" is a string literal (for now).  The
    command "Rd(s)" reads s from the input if it is present, otherwise
    it fails.  The command "Wr(s)" writes the string s to the output;
    it never fails.  The command "A;B" fails if either "A" or "B" fail,
    while the command A|B fails only if both "A" and "B" fail.  For
    example, the command

	Rd("0"); Wr("0")  |  Rd("1"); Wr("1")

    will copy a single zero or one from input to output.  (The
    semicolon binds more tightly than the vertical bar.)

    The main novelty in LIM is that failing commands never have side
    effects.  If a long computation has side effects and then fails, it
    is as though the side effects never happened.  For example,

	Rd("0"); Wr("0")

    and

	Wr("0"); Rd("0")

    mean exactly the same thing: copy a zero from input to output if
    possible, and otherwise fail without writing anything.

    Here are four more LIM primitives, three of which are overloadings
    of the previous "Rd" and "Wr" operators:

	Wr(c)    write the character "c"
	Rd(c)    read the character "c"
	Rd()     read and return the next input character
	DO A OD  repeatedly execute "A" until it fails

    "Rd()" fails only if the input is at end of file; otherwise it
    returns the (integer code for) the next character in the input, as
    it consumes that character.  "Rd(c)" reads the character "c" from the
    input or fails if the next character isn't "c".  "Wr(c)" never fails;
    it writes to output the character "c".

    For example, the following program will copy input to output,
    replacing all occurrences of "gnelson" with "burrows" and "burrows"
    with "gnelson":

	DO Rd("burrows"); Wr("gnelson")
	| Rd("gnelson"); Wr("burrows")
	| Wr(Rd())
	OD

    As a final artificial example, the program

	DO Rd(Rd()) OD

    reads pairs of identical characters from the input as long as
    possible.


LIM LANGUAGE DEFINITION

    PROGRAM. A program consists of a sequence a procedure declarations
    or global variable declarations.  Each of these declarations is
    terminated by a semicolon.

    The effect of executing a LIM program is to initialize all its
    global variables (in the order in which they are declared in the
    program) and then to execute the body of the procedure Main, which
    must be present and which must have no parameters.

    For example, here is a complete LIM program for counting the number
    of newlines in a file

	VAR n := 0;

	PROC Main() IS DO Rd('\n'); n := n + 1 | EVAL Rd() OD END;


    PROCEDURE DECLARATION. A procedure declaration has the syntax

	PROC outs := inouts:P(ins) IS B END;

    where "P" is an identifier, the name of the procedure, outs,
    inouts, and ins specify the parameters of various types, and "B" is
    a command, the body of the procedure. If there are no out
    parameters, "outs :=" must be omitted.  If there are no inout
    parameters, "inouts :"" must be omitted.  If there are no in
    parameters, "ins" must be empty, but the parentheses are still
    required.  Both "ins" and "inouts" are comma-separated lists of
    variables, but "inouts" is either a single variable, or a
    parenthesized comma-separated list of at least two variables.

    For example,

	PROC Main() IS DO Wr(Rd()) OD END;

	PROC n:Inc() IS n := n + 1 END;

	PROC (x,y):Swap IS VAR t := x IN x := y; y := t END END;

	PROC n := Square(m) IS n := m * m END;


    GLOBAL VARIABLE DECLARATION. A variable declaration has the syntax

	VAR vlist;

    where "vlist" is a comma-separated list of expressions of the form

	v := E

    where "v" is an identifier (the name of the global variable being
    declared) and "E" is an expression (the initial value for the
    variable).


    COMMAND. Here are the thirteen different types of LIM commands:

	A ; B			Execute "A", then execute "B".
	P -> A                  Evaluate "P"; if it is non-zero, execute "A",
				    else fail.
	A | B                   Execute "A", else execute "B" if "A" fails.
	DO A OD                 Repeatedly execute "A" until it fails.
	TIL A DO B END          Repeatedly execute "B" until
				    executing "A" succeeds.
	VAR vl IN A END         Introduce local variables "vl" and execute "A".
	v := E                  Evaluate the expression "E" and
				    assign its value to "v".
	EVAL E                  Evaluate the expression "E" and discard
				    the result.
	SKIP                    No-op
	FAIL                    This command always fails.
	ABORT                   Print an error message and abort the program.
	outs := inouts:P(ins)   Call procedure "P" with the given parameters.
	{ A }                   Execute "A"; braces are just statement
				    parentheses.

    Semicolon binds more tightly than the guard arrow, which binds more
    tightly than else.  But "A ; P -> B" means "A ; { P -> B }" since this
    is the only legal interpretation. 

    LIM has only integer variables.  The guard arrow therefore treats 0
    as false and any other value as true.

    The loop "DO A OD" is defined by unrolling it once:

	DO A OD  =  A; DO A OD | SKIP

    Notice that "DO A OD" never fails.  For example, "DO FAIL OD" is the
    same as "SKIP".

    The loop "TIL A DO B END" is defined by unrolling it once:

	TIL A DO B END   =   A  |  B; TIL A DO B END

    (recall that semicolon binds more tightly than else.)  Notice that
    "TIL A DO B END" can fail if "A" and "B" both fail, either initially or
    after some number of iterations of "B".

    For example, here is a procedure that skips everything up to and
    including the next blank line, where a blank line is defined as a
    line containing only blanks and tabs:

	PROC SkipToBlankLine() IS
	TIL Blankline() DO ReadLine() END
	END;

	PROC BlankLine() IS
	TIL Rd('\n') DO Rd(' ') | Rd('\t') END
	END;

	PROC ReadLine() IS
	TIL Rd('\n') DO EVAL Rd() END
	END

    It is easy to recode "BlankLine" using "DO OD" instead of "TIL DO END";
    but more troublesome for "ReadLine" and for "SkipToBlankLine".

    The command

	VAR v := E IN A END

    introduces a local variable "v" and then executes "v := E; A".  The
    scope of "v" includes "E" and "A"; it is probably a mistake (undetected
    by LIM) if "v" occurs in "E".  Between "VAR" and "IN" there can be a
    comma-separated list of expressions of the form "v := E"; for example

	VAR v1 := E1, v2 := E2 IN A END

    is short for

	VAR v1 := E1 IN VAR v2 := E2 IN A END END.

    For example, the following procedure reads a decimal digit and
    returns its value, or fails if the next input character is not a
    digit:

	PROC n := DigitVal() IS
	    VAR c := Rd() IN
		'0' <= c AND c <= '9' -> n := c - '0'
	    END
	END

    A procedure call has the form

	outs := inouts:P(ins)     

    where "P" is a procedure and "outs", "inouts", and "ins" specify
    the actual parameters of the various modes.  If there are no out
    parameters, "outs :=" must be omitted.  If there are no inout
    parameters, "inouts:" must be omitted.  If there are no in
    parameters, "ins" is empty, but the parentheses are still
    required.  Syntactically, "ins" is a comma-separated list of
    expressions, "outs" is a comma-separated list of identifiers, and
    "inouts" is either a single identifier or a parenthesized
    comma-separated list of at least two identifiers.

    To execute the call, the procedure's in and inout formals are bound
    to the values of the corresponding actuals; then the body of the
    procedure is executed, and finally the out and inout actuals are
    bound to the values of the corresponding formals.

    EXPRESSION.  Here are the operators allowed in LIM expressions,
    listed in groups.  Operators within a any group bind more tightly
    than those in the groups above them; operators in the same group
    have the same binding power and associate to the left.

	e OR f   logical disjunction; "f" is not evaluated if "e" is non-zero

	e AND f  logical conjunction; "f" is not evaluated if "e" is zero

	NOT e    logical negation

	e = f    equals
	e # f    differs
	e < f    less than
	e > f    greater than
	e <= f   at most
	e >= f   at least

	e + f    sum 
	e - f    difference

	e * f    product
	e DIV f  the floor of the real quotient of "e" and "f"
	e MOD f  e - f * (e DIV f)

	- e      unary minus

    The boolean operations produce 1 for true, 0 for false.  The "DIV"
    and "MOD" operations are the same as those of Modula-3 and Oberon.

    Expressions can also have the forms:

	inouts:P(ins)    procedure call
	v                The value of the variable "v".
	lit              An integer, string, or character literal.
	(e)              round parentheses for grouping

    A procedure can be called in an expression if it has exactly one
    out parameter.  The syntactic rule for inouts and for ins are the
    same as those previously-described for a procedure call used as a
    command, as are the rules for binding the in and inout parameters.
    However, after executing the body of the procedure, the value of
    its out parameter becomes the value of the expression.

    An integer literal is a non-empty sequence of decimal digits; it is
    interpreted base ten.

    A character literal is a single printing character or escape
    sequence enclosed in single quotes.  The escape sequences allowed
    are

	\t    tab
	\n    newline
	\f    form feed
	\r    return
	\s    blank space
	\b    backspace
	\v    vertical tab
	\e    escape
	\'    single quote
	\"    double quote
	\ddd  char with octal code ddd
	\xhh  char with hex code hh

    A string literal is a sequence of printing characters or escape
    sequences surrounded by double-quotes.  It is not allowed to
    contain a newline.  String literals are allowed only as parameters
    to the built-in procedures "Rd", "Wr", "At", and "Err": they are not
    allowed in general expressions.

    Variables are procedures are denoted by identifiers that consist of
    a sequence of letters, digits, and underbars beginning with a
    letter or underbar.

    LIM tokens can be separated by white space and comments.  A comment
    is an arbitrary sequence of characters opened by "(*" and closed by
    "*)".  Comments nest.


    BUILT-IN PROCEDURES.  LIM provides the following built-in
    procedures:

	Rd(str)         Read "str" (a string literal), or fail.
	Rd(c)           Read the character "c" (an expression), or fail.
	Rd()            Read and return the next character, or fail.

	Wr(str)         Write "str" (a string literal).
	Wr(c)           Write the character "c" (an expression).

	At(str)         A noop if "str" (a string literal) is
			    next in the input; otherwise fails.
	At(c)           A noop is the next character is "c";
			    otherwise fails.

	Eof()           A noop if at end of file; else fails.

	Err(str)        Write "str" to standard error.
	Err(c)          Write the character "c" (an expression)
			    to standard error.

    The primitive "Err" is useful for debugging, but it does not obey
    the rules of LIM: the output that it performs will not generally be
    undone, even if the computation fails.  For example,

	Err("A"); FAIL

    is NOT equivalent to "FAIL"; it will print "A" to standard error as
    it backtracks.  The exact output of a program containing calls to
    Err() depends on which internal optimizations the lim interpreter
    uses.

ERRORS
    LIM reports syntax errors or other static language violations with
    a line number.  Don't take the line number too seriously.  In this
    case the interpreter exits with Unix exit code 2.

    Common syntax errors are to include a redundant trailing semicolon
    (within commands, LIM uses semicolon to denote sequential
    composition, not to end a statement) or to omit the required empty
    parentheses on a procedure with no in parameters.

    If the LIM program aborts, the interpreter prints the line number
    at which it aborted and the number of characters the program had
    read and written at the time it aborted, and exits with code 2.

    If the program fails, LIM prints the error message "guard failed",
    together with the maximum number of characters that the program
    read from the input at any time in the backtracking execution
    before it was determined to fail; then the interpreter exits with
    code 1. Often an examination of the input in the vicinity of the
    high-water mark for reading can help you detect the reason for the
    failure.

    If the LIM program halts normally, the interpreter exits with
    code 0.

LIM EXECUTABLE FILES
    The interpreter ignores the first line of progfile if it starts
    with the character "#".  This allows the UNIX kernel to invoke the
    lim interpreter on LIM programs if the file has its execute bit
    set and starts with a line of the form:
    	#!lim_pathname
    where "lim_pathname" is the pathname of the lim interpreter.
    You can find this pathname by typing "which lim" to your shell.

FURTHER HINTS AND EXAMPLES
    COMMON PITFALLS.  When using LIM to parse context-free syntax, it
    is important to left-factor the grammar to reflect the different
    binding powers of the different operators.  For example, here is a
    program that reads an arithmetic expression containing sums and
    products and parenthesized decimal numerals and prints its value:

	PROC Main() IS WriteInt(Eval()); Wr('\n') END;

	PROC n := Eval() IS
	    n := Eval1();
	    DO Token('+'); n := n + Eval1() OD
	END;

	(* Eval1() evaluates an expression whose root operator is not "+". *)
	PROC n := Eval1() IS
	    n := Eval2();
	    DO Token('*'); n := n * Eval2() OD
	END;

	(* Eval2() evaluates an expression without a binary root operator. *)
	PROC n := Eval2() IS
	    n := ReadInt()
	  | Token('('); n := Eval(); Token(')')
	END;

	PROC n := ReadInt() IS
	    SkipWhite();
	    n := RdDigit();
	    DO n := 10 * n + RdDigit() OD
	END;

	PROC n := RdDigit() IS
	    VAR c := Rd() IN
		'0' <= c AND c <= '9' -> n := c - '0'
	    END
	END;

	PROC Token(c) IS SkipWhite(); Rd(c) END;

	PROC SkipWhite() IS
	    DO Rd(' ') | Rd('\t') | Rd('\n') OD
	END;

	PROC WriteInt(n) IS
	    n = 0 -> Wr('0')
	  | n < 0 -> Wr('-'); WI2(-n)
	  | WI2(n)
	END;

	PROC WI2(n) IS
	    n = 0 -> SKIP
	  | WI2(n DIV 10); Wr('0' + (n MOD 10))
	END;

    A common error is to forget to properly sort the cases of a long
    syntactic category.  For example, consider something like the
    following, which attempts to read identifiers, integers, or
    function applications:

	PROCEDURE Expr() IS
	    Id()
	  | Int()
	  | Id(); Rd('('); DO Expr() OD; Rd(')')
	  ...

    This is a mistake: the function application case will never be
    taken, since whenever it could be, the first case will be taken
    instead.

    WRITING FAST LIM PROGRAMS.  The basic strategy of the current
    implementation is to save the state before executing "A | B"; if
    "A" fails, the implementation restores the old state before
    continuing with "B".  Similarly, the state must be saved before each
    iteration of the "DO A OD" or "TIL B DO A END".  However, the
    implementation omits saving the state if static analysis shows that
    it is unnecessary.  For example, to execute

	Wr('0'); Rd('0') | ...

    the state must be saved, since it may be necessary to undo the
    write, but to execute

	Rd('0'); Wr('0') | ...

    there is no need to save the state, since if the left argument to
    "|" fails, it does so before causing any side effects.  As a
    result, the second command executes somewhat faster than the
    first.

BUGS
    The interpreter does not detect arithmetic overflow in the program
    it is interpreting.

SEE ALSO
    pplim(1) (pretty-printer for LIM programs)

AUTHORS OF OBJECT
    Mike Burrows and Greg Nelson

AUTHORS OF DOCUMENTATION
    Mike Burrows and Greg Nelson

Last modified on Thu Jan 28 22:26:51 1993 by burrows
     modified on Wed Jan 27 23:45:10 1993 by gnelson
